commit 6548abd191
Author: Gerald Combs <gerald@wireshark.org>
Date:   Mon Apr 19 12:23:07 2021 -0700

    Prep for 3.4.5.

commit 04f9d3e097
Author: Gerald Combs <gerald@wireshark.org>
Date:   Mon Apr 19 10:39:01 2021 -0700

    MS-WSP: Don't allocate huge amounts of memory.
    
    Add a couple of memory allocation sanity checks, one of which
    fixes #17331.
    
    
    (cherry picked from commit b7a0650e061b5418ab4a8f72c6e4b00317aff623)

commit 19d03ef4ac
Author: Gerald Combs <gerald@wireshark.org>
Date:   Wed Mar 31 11:30:45 2021 -0700

    CMake: Enable AUTO{MOC,UIC,RCC} according to our CMake version.
    
    As noted in be2b0fc810, we need to set CMAKE_AUTO* before searching for
    Qt packages when using 3.20.0 and later. However, this fails if we're
    using CMake 3.9.6 or earlier. Set CMAKE_AUTO* where needed depending on
    our CMake version.
    
    Ping #17314.
    
    (cherry picked from commit a80ea46ff7f19e4c7f9ade4970b0f2a2202f2ea2)
    
    Conflicts:
            ui/qt/CMakeLists.txt

commit eee907aeb5
Author: naf <naf@sdf.org>
Date:   Tue Feb 2 13:25:52 2021 -0600

    QT ByteViewText: calculate string widths consistently to prevent clipping
    
    For QT >5.11, stringWidth() uses horizontalAdvance, which gives different
    (longer) widths than the old boundingRect().width() method.
    
    Other locations use the boundRect().width() method directly, resulting
    in underestimating line widths and clipping the last characters in
    the byte view window.
    
    Fix by forcing all width calculations to use stringWidth().
    Closes #17087.
    
    (cherry picked from commit 95f3d1b0750044967c6cf2f767d809453ca7819b)
    
    Conflicts:
            ui/qt/widgets/byte_view_text.cpp

commit cc954fae7e
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Apr 18 09:52:11 2021 +0000

    [Automatic update for 2021-04-18]
    
    Update manuf, services enterprise numbers, translations, and other items.

commit e49430b4d3
Author: Stefan Metzmacher <metze@samba.org>
Date:   Tue Apr 6 20:52:17 2021 +0200

    packet-ldap: fix regression for SASL handling
    
    commit 19b3376a24192319a008399e8c44f1655f6dcebd
    ("LDAP bogus malformed errors: decoding encrypted data")
    introduced 2 problems:
    
    - guint decr_len = tvb_reported_length(decr_tvb); was
      always called with decr_tvb==NULL
    
    - dissect_ldap_payload() was not called if sasl_tree is NULL,
      it needs to be called even if the tree pointer are NULL
      in order to have the COL_INFO setup correctly.
    
    I guess this should also be backported to stable branches
    (together with 2e6d3b571b50f6a0df31787cb95ba0f66c4fa85f
     "LDAP: SASL Buffer doesn't include Length field")
    
    https://gitlab.com/wireshark/wireshark/-/issues/17347
    
    Signed-off-by: Stefan Metzmacher <metze@samba.org>
    
    
    (cherry picked from commit 1d623fd54116fbe234300712a9cbf04560802e9f)

commit 0c1743656f
Author: Uli Heilmeier <uh@heilmeier.eu>
Date:   Mon Mar 22 22:34:20 2021 +0100

    LDAP: SASL Buffer doesn't include Length field
    
    SASL Buffer starts after the SASL Buffer Length field. Therefore
    we should only mark the bytes without the Length field.
    
    Sample capture can be found in wireshark/wireshark#15128
    
    
    (cherry picked from commit 2e6d3b571b50f6a0df31787cb95ba0f66c4fa85f)

commit d28ded7244
Author: Simon Holesch <simon@holesch.de>
Date:   Sat Mar 6 01:56:06 2021 +0100

    ptvcursor: Fix crash with deeply nested subtrees
    
    If the proto tree is more than 8 levels deep, the subtree_lvl array
    length is extended, by allocating a new area and copying everything into
    that new area. However the old array length wasn't calculated correctly,
    so only part of the subtree_lvl array was copied, causing a crash after
    two ptvcursor_pop_subtree() calls.
    
    
    (cherry picked from commit fa483ac191d4ec6b1994d600e37af6815a97ce18)

commit 489fc40a49
Author: Michael Tuexen <tuexen@wireshark.org>
Date:   Wed Apr 14 14:33:29 2021 +0200

    Fix conversation table when using epoch based time
    
    Ensure that if using tshark -q -t e -z conv,tcp the reported
    start time is relative to the epoch time and not relative to
    the time of the first packet in the capture file.
    
    Thanks to Theresa Enghardt for reporting the issue and to
    Peter Lei for initialy looking into it.
    
    (cherry picked from commit f099bd179a6ff86e3f9fd6b779ccad707f379aad)

commit cb432b878e
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Apr 11 09:53:17 2021 +0000

    [Automatic update for 2021-04-11]
    
    Update manuf, services enterprise numbers, translations, and other items.

commit cdca1f2d03
Author: Guy Harris <gharris@sonic.net>
Date:   Thu Apr 8 19:38:26 2021 -0700

    pcapng: expand a comment and tweak the version test.
    
    Drop in the comment from libpcap about version 1.2 (I wrote that
    comment, and generously double-license it under the BSD license and the
    GPL :-)).
    
    Redo the version test as
    
        if (!({version is one we handle}))
    
    to match the way it's done in libpcap.
    
    
    (cherry picked from commit 7de6b0822ad764edfa0ddd76e6a383bd3408a4e6)

commit 716dd09605
Author: Loris Degioanni <loris@sysdig.com>
Date:   Wed Apr 7 16:54:26 2021 -0700

    sysdig: a couple more fixes
    
    - parse the number of system call arguments in a way that works for both V1 and V2 event blocks
    - returned the correct error string when unable to read the nparams entry from a sysdig event block V2
    
    (cherry picked from commit 7894b1d0ea86224a16c3dbebae0c6db56f590f84)

commit 4e7df5af01
Author: Loris Degioanni <loris@sysdig.com>
Date:   Tue Apr 6 14:42:39 2021 -0700

    sysdig: implementation fixes
    
    - make sure nparams is initialized
    - validate block_total_length in the correct way for sysdig event blocks
    
    (cherry picked from commit cbbe6605043b6137f0a7eb22693969586893637d)

commit 180c96beb8
Author: Loris Degioanni <loris@sysdig.com>
Date:   Tue Apr 6 13:35:58 2021 -0700

    sysdig: simplified the separate handling of the two different sysdig block types
    
    (cherry picked from commit 8c70dd8d176fca0c7e4ed759de0a05c2dd6424cf)

commit e94d9f4549
Author: Loris Degioanni <loris@sysdig.com>
Date:   Mon Apr 5 22:16:09 2021 -0700

    sysdig: support the most recent version of sysdig
    Update the pcap-ng reader and sysdig event dissector to support the second version of the sysdig event block, which was introduced after Wireshark's original implementation
    
    (cherry picked from commit fbe8d3a00f1408960186572de96f82b4616eed49)

commit 1be17e2d30
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Apr 4 13:28:16 2021 -0700

    GitLab CI: Switch to our new Windows runner.
    
    
    (cherry picked from commit 85b36ef4b6090b719bb46bc17ec58a07faff97ab)

commit f1677bd31c
Author: David Perry <boolean263@protonmail.com>
Date:   Thu Jan 7 16:21:42 2021 -0500

    maxmind: add optional synchronous lookups
    
    When tshark enables synchronous resolution of IP addresses to names,
    forces calls to maxmind_db_lookup_ipv4()/_ipv6() to block-wait for the
    maxmind response.
    
    Proposed fix for #14691.
    
    (backported from commit c0abaa06f717a38ba15c24f10ee19fcc69b21537)

commit 3e35fecccb
Author: Vahap Emin Agaogullari <vahapemin44@gmail.com>
Date:   Tue Feb 23 11:15:14 2021 +0000

    PROFINET: Multiple write in record dissection
    
    COContainerContent dissects PDInterfaceMrpDataAdjust and
    PDInterfaceMrpDataAdjust dissects remaining COContainerContent
    because of offset problem. Offset problem is fixed.
    
    (cherry picked from commit ccec04ede0591a5e83d2664c26ed5cb4481a6809)
    (cherry picked from commit ecbe04e0bbc6634eaa6c54968870fee61760107c)

commit 4a7ddb6b1a
Author: Guy Harris <gharris@sonic.net>
Date:   Mon Mar 29 00:55:23 2021 +0000

    tvbuff_subset: fix its implementation of string scanning.
    
    Both subset_find_guint8() and subset_pbrk_guint8() pass the parent
    tvbuff to tvb_find_guint8()/tvb_ws_mempbrk_pattern_guint8(), along with
    the offset in that tvbuff.
    
    That means that the offset they get back is relative to that tvbuff, so
    it must be adjusted to be relative to the tvbuff *they* were handed.
    
    For subsets of frame and "real data" tvbuffs, there's a single lump of
    data containing the content of the subset tvbuff, so they go through the
    "fast path" and get the offset correct, bypassing the broken code;
    that's the vast majority of calls to those routines.
    
    For subsets of *composite* tvbuffs, however, they don't go through the
    "fast path", and this bug shows up.
    
    This causes both crashes and misdissection of HTTP if the link-layer is
    PPP with Van Jacobson compression, as the decompression uses composite
    tvbuffs.
    
    Fixes #17254 and its many soon-to-be-duplicates.
    
    
    (cherry picked from commit 2ba52cdc0e4216dafdfc32498fc0210c99449ec9)

commit 636f7f1c09
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Mar 28 09:54:39 2021 +0000

    [Automatic update for 2021-03-28]
    
    Update manuf, services enterprise numbers, translations, and other items.

commit 193b1fc545
Author: Guy Harris <gharris@sonic.net>
Date:   Sun Mar 28 02:31:37 2021 +0000

    wslua_tvb: correctly trim off the end of a tvbuff.
    
    The length specified in a TvbRange is the *actual packet length*, not
    the *sliced-to* length, so use tvb_new_subset_length() to cut it short.
    
    This fixes the fix for #15655, and addresses at least some of the issues
    in #17255.
    
    
    (cherry picked from commit cda18f951ebfe53dc5bbb841618dc12e31b38ec6)

commit 6ef6e8f607
Author: Gerald Combs <gerald@wireshark.org>
Date:   Fri Mar 26 12:52:01 2021 -0700

    CMake: Enable AUTO{MOC,UIC,RCC} earlier.
    
    Enable CMAKE_AUTOMOC, CMAKE_AUTOUIC, and CMAKE_AUTORCC before searching
    for Qt packages. This is apparently required for CMake 3.20.0 and later.
    Fixes #17314.
    
    (cherry picked from commit be2b0fc810fb2f2a80e471138dc29f0cbe87b209)
    
     Conflicts:
            ui/qt/CMakeLists.txt

commit 3bca4e3b3f
Author: Nardi Ivan <nardi.ivan@gmail.com>
Date:   Tue Mar 16 17:06:20 2021 +0000

    SMB2: fix two memory leaks
    
    * Since c3342930 we don't free anymore the entries in the files hashtables.
    The cleanest solution is probably to convert these hashtables into two
    wmem_map_t structures and let the wmem core handling any cleanup.
    
    * b0f5b2c1749 added supported for chained compression; the uncompressed
    tvb must be freed
    
    
    (cherry picked from commit e677a909e15126a61253004c88e48ae3c64420fc)

commit 6b072b63f0
Author: Uli Heilmeier <uh@heilmeier.eu>
Date:   Tue Mar 23 11:32:42 2021 +0000

    DNS: Fix pointer for is_multiple_responses
    
    As discussed in wireshark/wireshark!2497 there is no need
    for a pointer to a pointer.
    
    
    (cherry picked from commit 337bdf8eb34be3fc5ccd1197868077e6276a2d6c)

commit 06e20df535
Author: Uli Heilmeier <uh@heilmeier.eu>
Date:   Sun Mar 21 10:15:56 2021 +0100

    DNS: IXFR/AXFR queries with multiple responses
    
    IXFR and AXFR queries can have multiple DNS responses. As all responses
    belong to one transaction, they have the same transaction ID.
    
    We shouldn't handle them as retransmits.
    
    Fix: wireshark/wireshark#17293
    (cherry picked from commit 07fb47111ee968ba132ce98764486dc825209e80)

commit 878e8058a6
Author: Guy Harris <gharris@sonic.net>
Date:   Mon Mar 22 19:13:34 2021 -0700

    Do the LFS checks before processing any subdirectories.
    
    That's necessary in order to make sure that the required -D flags show
    up when building code from all subdirectories.
    
    (cherry picked from commit 3f556a6e7639716a7254a4fcdf88e33ef3896fe8)

commit d0fdecc6b6
Author: Guy Harris <gharris@sonic.net>
Date:   Mon Mar 22 02:47:56 2021 -0700

    Replace the Large File Support CMake stuff.
    
    The existing stuff doesn't appear to work (I tried it on 32-bit Ubuntu
    18.04, and it did *not* add any flags to the compilation, as it appeared
    not to conclude that they were necessary, even though they were).
    
    Pull in the stuff from libpcap, which *does* appear to work.  (it does
    so in my 32-bit Ubuntu testing).
    
    This should fix #17301.
    
    While we're at it, fix cppcheck.sh so that it doesn't attempt to run
    cppcheck on files that have been deleted.
    
    (cherry picked from commit 0cc59d38ab6ef38e965d4de8a3ec4b80bcb5a6a3)

commit 76f01ea726
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Mar 21 09:57:41 2021 +0000

    [Automatic update for 2021-03-21]
    
    Update manuf, services enterprise numbers, translations, and other items.

commit b2d8858b9a
Author: Darius Davis <darius@vmware.com>
Date:   Fri Mar 19 23:37:53 2021 +0000

    Minor doc cleanups.
    
    Here's a grab bag of trivial cleanup to the documentation.  This change:
    
    - Cleans up some comments in the asciidoctor macros which are no longer
      accurate (and do not appear in the build products anyway).
    
    - Fixes a missing space in the text "Wireshark Q&A" in the release notes.
    
    - Allows the "docbook" backend to produce hyperlinks too... That seems to be
      necessary if we want to start using our custom link macros in WSDG, which
      seems like a reasonable thing to do.  And fixes up a wrong variable name in
      the handling of the case where we are not able to produce a hyperlink.
    
    
    (cherry picked from commit 4c513fb4ab880b2c63491d91b8ccf6ce17627f08)

commit f63d93957d
Author: Guy Harris <gharris@sonic.net>
Date:   Thu Mar 18 04:22:41 2021 +0000

    caputils: pull the includes out of extern "C" { ... }.
    
    Have separate #ifdef HAVE_LIBPCAP ... #endif sections for the includes
    and the definitions/declarations.
    
    (There are no good solutions that don't require hopping in a time
    machine and changing history.)
    
    
    (cherry picked from commit 5a4cb7ce331830b74c703882c1738d6c1e2c5fa7)

commit fcefe78a67
Author: Guy Harris <gharris@sonic.net>
Date:   Wed Mar 17 21:59:55 2021 +0000

    caputils: get rid of the extern "C" { idiom.
    
    Instead, declare each function with EXTERN_C, #defined as extern "C" in
    C++ and just extern in C.
    
    This avoids all the thrashing to try to keep headers outside extern "C"
    { by the simple expedient of not *having* extern "C" {.
    
    
    (cherry picked from commit 4584b9d1d396920468e0b8a71f1681c7cfda382b)

commit 2974b30150
Author: Dario Lombardo <lomato@gmail.com>
Date:   Wed Mar 17 21:12:42 2021 +0000

    caputils: fix compilation without pcap.
    
    The extern declaration must be put outside the ifdef to match the
    closing statement as well as surrounding al the functions.
    
    Fixes: 2820156fbd4b0213ca015216d8cd97c31b503c8c (Move still *more* headers outside of extern "C".)
    
    
    (cherry picked from commit 9ca121bcf87dc638d9f0bf1314bee7b906523b70)

commit 95c7c1c0f2
Author: Guy Harris <gharris@sonic.net>
Date:   Tue Mar 16 21:57:30 2021 +0000

    kerberos: regenerate packet-kerberos.h.
    
    We updated the template; regenerate the header.
    
    
    (cherry picked from commit 7efb2120bc37cbb3b23682c16f5bb73e05295383)

commit b5d65c0074
Author: Guy Harris <gharris@sonic.net>
Date:   Tue Mar 16 13:50:13 2021 -0700

    Move still *more* headers outside of extern "C".
    
    If a header declares a function, or anything else requiring the extern
    "C" decoration, have it wrap the declaration itself; don't rely on the
    header itself being included inside extern "C".
    
    (cherry picked from commit 2820156fbd4b0213ca015216d8cd97c31b503c8c)

commit 0b8c953533
Author: Guy Harris <gharris@sonic.net>
Date:   Tue Mar 16 04:33:00 2021 -0700

    Move even more headers outside extern "C".
    
    If a header declares a function, or anything else requiring the extern
    "C" decoration, have it wrap the declaration itself; don't rely on the
    header itself being included inside extern "C".
    
    (cherry picked from commit e434d404d0db719440cc911729d225417a49b4f4)

commit f1f937dd26
Author: Guy Harris <gharris@sonic.net>
Date:   Tue Mar 16 11:21:16 2021 +0000

    Move more headers outside extern "C".
    
    If a header declares a function, or anything else requiring the extern
    "C" decoration, have it wrap the declaration itself; don't rely on the
    header itself being included inside extern "C".
    
    
    (cherry picked from commit 1e1f4e6b5f9a309cef55d4459c8bba40d6acc104)

commit d0e6ad310b
Author: Michal Ruprich <michalruprich@gmail.com>
Date:   Wed Feb 10 15:32:18 2021 +0100

    Moving glib.h out of extern C
    
    (cherry picked from commit c8246c99737c7a844f45eb0e777382cc68397d17)

commit f6cfb8362c
Author: Guy Harris <gharris@sonic.net>
Date:   Mon Mar 15 04:59:42 2021 +0000

    debian-setup: include GCC and G++ in the basic list.
    
    At least on my just-now-installed Kubuntu 20.04 VM, G++ wasn't installed
    by default, and you need that to compile Wireshark (you can avoid it if
    you're not building the GUI code, but the GUI code is Qt-based, so it's
    in C++).  Add both GCC and G++ to the basic list.
    
    
    (cherry picked from commit 5f0dc153dd317ed1eaf8bb7fdf6b37268f951eac)

commit 82f93c42f7
Author: Guy Harris <gharris@sonic.net>
Date:   Mon Mar 15 00:40:42 2021 +0000

    Fix the captions for the buttons in the "export specified packets" dialog.
    
    The "Selected packet" caption is wrong, as there could be more than one
    packet selected.  Furthermore, in the non-Windows "export specified
    packets" dialog, the caption is "Selected packets only", so go with the
    full caption.
    
    The "Marked packets" caption also lacks the "only" that it has in the
    other dialog; add it as well.
    
    
    (cherry picked from commit f785cf53401c38d695de7b961babc6b796466a50)

commit 7e0360206e
Author: Guy Harris <gharris@sonic.net>
Date:   Sun Mar 14 06:51:36 2021 -0700

    Clean up "Export PDUs to File" code.
    
    Combine exp_pdu_file_open() is called only by do_export_pdu(); just
    combine them into one routine.
    
    Get rid of the exp_pdu_t * argument to do_export_pdu(); instead, have
    the exp_pdu_t structure be a local variable in that routine.  There's no
    need to initialize exp_pdu_data.pkt_encap in
    ExportPDUDialog::on_buttonBox_accepted() - do_export_pdu() already does
    so.
    
    The return value of do_export_pdu() isn't used; don't return anything.
    
    (backported from commit 01151ec332f6232cd7b86d1b9026e54decb88203)

commit 6cbf30fa88
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Mar 14 10:32:22 2021 +0000

    [Automatic update for 2021-03-14]
    
    Update manuf, services enterprise numbers, translations, and other items.

commit 3d9603e051
Author: Guy Harris <gharris@sonic.net>
Date:   Sun Mar 14 06:35:25 2021 +0000

    tap_export_pdu: free err_info for WTAP_ERR_INTERNAL.
    
    WTAP_ERR_INTERNAL also returns an err_info script describing the
    internal error, so it should be freed to avoid leaking it.
    
    
    (cherry picked from commit d4c55ba464f2b6842a0a05fc623030b80322367a)

commit 7a7da50fc3
Author: Guy Harris <gharris@sonic.net>
Date:   Sun Mar 14 06:00:21 2021 +0000

    pcapng: make sure the packet encapsulation matches the interface encapsulation.
    
    If an attempt is made to write a packet with one encapsulation for an
    interface with a different encapsulation, report an internal error.
    
    
    (cherry picked from commit 610dffbb19532034309a0ee326128a71608ebe6a)

commit 4482949ddc
Author: John Thacker <johnthacker@gmail.com>
Date:   Fri Mar 12 22:12:40 2021 -0500

    export_pdu: set pkt_encap to a WTAP_ENCAP value, not a pcap LINKTYPE_ value.
    
    rec.rec_header.packet_header.pkt_encap expects WTAP encapsulation types,
    not PCAP encapsulation types, so don't call
    wtap_wtap_encap_to_pcap_encap().
    
    Also, set the output file encapsulation, and the link-layer type of the
    fake interface, to exp_pdu_tap_data->pkt_encap rather than wiring it to
    WTAP_ENCAP_WIRESHARK_UPPER_PDU (we set exp_pdu_tap_data->pkt_encap to
    WTAP_ENCAP_WIRESHARK_UPPER_PDU, but this is a bit cleaner).
    
    (backported from commit ea60a57826624bcdf8f955af85af7130c8864018)

commit 53a7984431
Author: Guy Harris <gharris@sonic.net>
Date:   Sat Mar 13 23:32:14 2021 +0000

    tshark: clean u the way the -U option lists available taps.
    
    Allow "-U ?" as well as an empty argument; an empty argument is a bit
    counterintuitive.
    
    Simplify the introductory line of output - asking for a list of taps
    isn't an error in which the user failed to supply a tap name, it's a
    case where the user suplied a request for a list of tap names.
    
    Just use fprintf() to print the list, and indent the elements of the
    list, as we do with other lists of valid arguments.
    
    List the valid arguments if the user specified an invalid argument as
    well.
    
    
    (cherry picked from commit 9bd144b8ea30a7345eca3c0cb590bc146f45f97c)

commit 392d01c2cc
Author: Guy Harris <gharris@sonic.net>
Date:   Sat Mar 13 12:58:18 2021 +0000

    tshark: fix handling of "you're writing to a closed pipe" errors on Windows.
    
    On Windows, a write to a pipe where the read side has been closed
    apparently may return the Windows error ERROR_BROKEN_PIPE, which the
    Visual Studio C library maps to EPIPE, or may return the Windows error
    ERROR_NO_DATA, which the Visual Studio C library maps to EINVAL.
    
    So, on Windows, for errors other than the ones for which we're reporting
    a special error message, check for EINVAL with a *Windows* error of
    ERROR_NO_DATA and, if that's what we have, don't print an error message;
    otherwise, print an error message that reports a message based on the
    Windows error (rather than a relatively uninformative "Invalid argument"
    error).
    
    This should fix issue #16192.
    
    Clean up indentation while we're at it.
    
    
    (cherry picked from commit 1eb4a62dbc190b0f0cfcf7b945bb0e82ddf2246c)

commit 20a013b835
Author: Alexis La Goutte <alexis.lagoutte@gmail.com>
Date:   Fri Mar 12 08:51:11 2021 +0000

    NAN(WiFi): Fix wrong variable size
    
    NDPE Attribute is not dissected
    
    Issue (and fix) reported by Darren Chen
    
    Closed #17278
    
    
    (cherry picked from commit 73de7b132559ad876f4be113b7356979a14730c2)

commit fbbaa3d03d
Author: Alexis La Goutte <alexis.lagoutte@gmail.com>
Date:   Fri Mar 12 08:52:21 2021 +0000

    EAP: fix a memory leak
    
    
    (cherry picked from commit 20a6fea312342802cc76178cec673acf67ba7a26)

commit fd940a364c
Author: Guy Harris <gharris@sonic.net>
Date:   Thu Mar 11 02:11:02 2021 -0800

    pcapng: clean up pcapng_block_read().
    
    Instead of pcapng_open() calling pcap_block_read() to do all the work of
    reading the initial SHB, have it do the read of the initial SHB itself,
    by calling the same routines that pcap_block_read() calls.
    
    That way, pcap_block_read() doesn't have to be prepared to be called to
    read that block, so it can treat all issues with an SHB that it reads as
    errors, rather than possibly reporting them as "not a pcapng file", and
    it doesn't have to support being called without a pointer to the
    pcapng_t for the file being read, as it no longer ever is.  It can now
    just return a gboolean success/failure indication.
    
    That makes pcapng_open() a little more complicated but it makes
    pcap_block_read() less complicated.
    
    Fix some use of : as ' in comments, and fix some indentation, while
    we're at it.
    
    (backported from commit aab0bd12a59a1f59e8e0f9cf8010b29e8092406c)

commit 3a657cb4fb
Author: Dr. Lars Völker <lars.voelker@technica-engineering.de>
Date:   Tue Mar 9 12:12:14 2021 +0000

    TECMP: Adding missing reserved flag to timestamp (BUGFIX)
    
    This patch fixes a bug in the current TECMP dissector that leads to
    wrong timestamps, whenever the reserved flag is set to true.
    
    Closes: #17279
    
    
    (cherry picked from commit 5d709459c4728a460888ee8602f3990f17e91318)

commit e8421b1a0e
Author: Gerald Combs <gerald@wireshark.org>
Date:   Wed Mar 10 13:15:15 2021 -0800

    GitLab CI: Add a `tshark -G` artifact.
    
    Dump `tshark -G fields` to a file and add it as an artifact. This
    automates a step in the release process.

commit 580812874a
Author: Guy Harris <gharris@sonic.net>
Date:   Wed Mar 10 20:55:50 2021 +0000

    pcapng: get rid of the local pcapng_t in pcapng_open().
    
    Pass a null pointer to pcapng_read_block(), instead.  In
    pcapng_read_block(), treat that as the indication that we're trying to
    read the purported first SHB, rather than treating a null section_info
    pointer as that indication.
    
    This addreses one, but not all, of the problems reported in issue #17281.
    
    
    (cherry picked from commit 7446a16247a8f04b1fa476e526cdaa97be00f32e)

commit 2f7cf6e528
Author: Martin Mathieson <martin.mathieson@keysight.com>
Date:   Wed Mar 10 21:21:56 2021 +0000

    DECT: "tranceiver" -> "transceiver"
    
    
    (cherry picked from commit 933e7f5eb6798e72e349099be3cd16a890be7fc7)

commit 45aed9966c
Author: Gerald Combs <gerald@wireshark.org>
Date:   Wed Mar 10 12:23:46 2021 -0800

    Version: 3.4.4 → 3.4.5.
    
    [skip ci]
